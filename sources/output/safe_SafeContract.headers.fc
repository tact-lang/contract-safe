;;
;; Header files for SafeContract
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_int_eq_nullable_one
int __tact_int_eq_nullable_one(int a, int b) inline;

;; __tact_cell_eq_nullable
int __tact_cell_eq_nullable(cell a, cell b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $SafeParameters$_store
builder $SafeParameters$_store(builder build_0, (int, int, int) v) inline;

;; $SafeParameters$_load
(slice, ((int, int, int))) $SafeParameters$_load(slice sc_0) inline;

;; $SafeOperations$_store
builder $SafeOperations$_store(builder build_0, (cell, int) v) inline;

;; $SafeOperations$_load
(slice, ((cell, int))) $SafeOperations$_load(slice sc_0) inline;

;; $SafeOperationTransfer$_load
(slice, ((slice, int, int, int, cell))) $SafeOperationTransfer$_load(slice sc_0) inline;

;; $SafeOperationUpdateParameters$_load
(slice, (((int, int, int)))) $SafeOperationUpdateParameters$_load(slice sc_0) inline;

;; $SafeOperationAdd$_load
(slice, ((slice))) $SafeOperationAdd$_load(slice sc_0) inline;

;; $SafeOperationRemove$_load
(slice, ((slice))) $SafeOperationRemove$_load(slice sc_0) inline;

;; $SafeOperationReplace$_load
(slice, ((slice, slice))) $SafeOperationReplace$_load(slice sc_0) inline;

;; $SafeOperationTransfer$_as_optional
tuple $SafeOperationTransfer$_as_optional((slice, int, int, int, cell) v) inline;

;; $SafeOperationUpdateParameters$_as_optional
tuple $SafeOperationUpdateParameters$_as_optional(((int, int, int)) v) inline;

;; $SafeOperationAdd$_as_optional
tuple $SafeOperationAdd$_as_optional((slice) v) inline;

;; $SafeOperationRemove$_as_optional
tuple $SafeOperationRemove$_as_optional((slice) v) inline;

;; $SafeOperationReplace$_as_optional
tuple $SafeOperationReplace$_as_optional((slice, slice) v) inline;

;; $SafeOperation$_load
(slice, ((tuple, tuple, tuple, tuple, tuple))) $SafeOperation$_load(slice sc_0) inline;

;; $SafeOperation$_as_optional
tuple $SafeOperation$_as_optional((tuple, tuple, tuple, tuple, tuple) v) inline;

;; $SafeOperation$_load_opt
tuple $SafeOperation$_load_opt(cell cl) inline;

;; $SafeDeployment$_load
(slice, ((slice))) $SafeDeployment$_load(slice sc_0) inline;

;; $SafeRequestOperation$_load
(slice, (((cell, int)))) $SafeRequestOperation$_load(slice sc_0) inline;

;; $VoteArgs$_store
builder $VoteArgs$_store(builder build_0, (slice, cell, int, int, int, (cell, int)) v) inline_ref;

;; $VoteArgs$_load
(slice, ((slice, cell, int, int, int, (cell, int)))) $VoteArgs$_load(slice sc_0) inline_ref;

;; $VoteSuccess$_load
(slice, (((slice, cell, int, int, int, (cell, int))))) $VoteSuccess$_load(slice sc_0) inline;

;; $VoteFailure$_load
(slice, (((slice, cell, int, int, int, (cell, int))))) $VoteFailure$_load(slice sc_0) inline;

;; $VoteDeploy$_store
builder $VoteDeploy$_store(builder build_0, (int) v) inline;

;; $VoteDeploy$_store_cell
cell $VoteDeploy$_store_cell((int) v) inline;

;; $SafeContract$_store
builder $SafeContract$_store(builder build_0, (int, cell, int, int, (int, int, int)) v) inline;

;; $SafeContract$_load
(slice, ((int, cell, int, int, (int, int, int)))) $SafeContract$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $SafeParameters$_to_external
(int, int, int) $SafeParameters$_to_external(((int, int, int)) v) inline;

;; $SafeOperation$_not_null
((tuple, tuple, tuple, tuple, tuple)) $SafeOperation$_not_null(tuple v) inline;

;; $SafeOperationTransfer$_not_null
((slice, int, int, int, cell)) $SafeOperationTransfer$_not_null(tuple v) inline;

;; $SafeOperationUpdateParameters$_get_parameters
_ $SafeOperationUpdateParameters$_get_parameters(((int, int, int)) v) inline;

;; $SafeOperationUpdateParameters$_not_null
(((int, int, int))) $SafeOperationUpdateParameters$_not_null(tuple v) inline;

;; $SafeContract$init$_load
(slice, ((slice, int))) $SafeContract$init$_load(slice sc_0) inline;

;; $VoteContract$init$_store
builder $VoteContract$init$_store(builder build_0, ((slice, cell, int, int, int, (cell, int))) v) inline;

;; $SafeParameters$_constructor_timeout_requestPrice_timelock
((int, int, int)) $SafeParameters$_constructor_timeout_requestPrice_timelock(int timeout, int requestPrice, int timelock) inline;

;; $SafeContract$_contract_init
(int, cell, int, int, (int, int, int)) $SafeContract$_contract_init(slice $owner, int $id) impure inline_ref;

;; $SafeContract$_contract_load
(int, cell, int, int, (int, int, int)) $SafeContract$_contract_load() impure inline_ref;

;; $SafeContract$_contract_store
() $SafeContract$_contract_store((int, cell, int, int, (int, int, int)) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $SendParameters$_constructor_value_to_mode_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_value_to_mode_bounce_body(int value, slice to, int mode, int bounce, cell body) inline;

;; $SafeContract$_fun_executeTransfer
((int, cell, int, int, (int, int, int)), ()) $SafeContract$_fun_executeTransfer((int, cell, int, int, (int, int, int)) $self, (slice, int, int, int, cell) $op) impure inline_ref;

;; $SafeContract$_fun_executeParameters
((int, cell, int, int, (int, int, int)), ()) $SafeContract$_fun_executeParameters((int, cell, int, int, (int, int, int)) $self, ((int, int, int)) $op) impure inline_ref;

;; $SafeContract$_fun_execute
((int, cell, int, int, (int, int, int)), ()) $SafeContract$_fun_execute((int, cell, int, int, (int, int, int)) $self, (tuple, tuple, tuple, tuple, tuple) $op) impure inline_ref;

;; $SafeContract$_fun_parameters
((int, cell, int, int, (int, int, int)), (int, int, int)) $SafeContract$_fun_parameters((int, cell, int, int, (int, int, int)) $self) impure inline_ref;

;; $SafeContract$_fun_treshold
((int, cell, int, int, (int, int, int)), int) $SafeContract$_fun_treshold((int, cell, int, int, (int, int, int)) $self) impure inline_ref;

;; $SafeContract$_fun_seqno
((int, cell, int, int, (int, int, int)), int) $SafeContract$_fun_seqno((int, cell, int, int, (int, int, int)) $self) impure inline_ref;

;; $SafeContract$_fun_isOwner
((int, cell, int, int, (int, int, int)), int) $SafeContract$_fun_isOwner((int, cell, int, int, (int, int, int)) $self, slice $address) impure inline_ref;

;; $SafeContract$_fun_owners
((int, cell, int, int, (int, int, int)), cell) $SafeContract$_fun_owners((int, cell, int, int, (int, int, int)) $self) impure inline_ref;

;; $SafeContract$_fun_forward
((int, cell, int, int, (int, int, int)), ()) $SafeContract$_fun_forward((int, cell, int, int, (int, int, int)) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $SafeContract$_fun_notify
((int, cell, int, int, (int, int, int)), ()) $SafeContract$_fun_notify((int, cell, int, int, (int, int, int)) $self, cell $body) impure inline;

;; $VoteContract$_init_child
(cell, cell) $VoteContract$_init_child(cell sys', (slice, cell, int, int, int, (cell, int)) $args) inline_ref;

;; $SendParameters$_constructor_to_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice to, int value, int mode) inline;

;; $VoteArgs$_constructor_safe_owners_ownersCount_treshold_timeout_ops
((slice, cell, int, int, int, (cell, int))) $VoteArgs$_constructor_safe_owners_ownersCount_treshold_timeout_ops(slice safe, cell owners, int ownersCount, int treshold, int timeout, (cell, int) ops) inline;

;; $SendParameters$_constructor_value_to_mode_bounce_code_data_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_value_to_mode_bounce_code_data_body(int value, slice to, int mode, int bounce, cell code, cell data, cell body) inline;

;; $VoteDeploy$_constructor_queryId
((int)) $VoteDeploy$_constructor_queryId(int queryId) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
