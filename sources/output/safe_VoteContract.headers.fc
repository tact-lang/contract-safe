;;
;; Header files for VoteContract
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_int_eq_nullable_one
int __tact_int_eq_nullable_one(int a, int b) inline;

;; $SafeOperations$_store
builder $SafeOperations$_store(builder build_0, (cell, int) v) inline;

;; $SafeOperations$_load
(slice, ((cell, int))) $SafeOperations$_load(slice sc_0) inline;

;; $EventVote$_store
builder $EventVote$_store(builder build_0, (int, slice) v) inline;

;; $EventVote$_store_cell
cell $EventVote$_store_cell((int, slice) v) inline;

;; $EventVoteCompleted$_store
builder $EventVoteCompleted$_store(builder build_0, (int) v) inline;

;; $EventVoteCompleted$_store_cell
cell $EventVoteCompleted$_store_cell((int) v) inline;

;; $VoteArgs$_store
builder $VoteArgs$_store(builder build_0, (slice, cell, int, int, int, (cell, int)) v) inline_ref;

;; $VoteArgs$_load
(slice, ((slice, cell, int, int, int, (cell, int)))) $VoteArgs$_load(slice sc_0) inline_ref;

;; $VoteSuccess$_store
builder $VoteSuccess$_store(builder build_0, ((slice, cell, int, int, int, (cell, int))) v) inline;

;; $VoteSuccess$_store_cell
cell $VoteSuccess$_store_cell(((slice, cell, int, int, int, (cell, int))) v) inline;

;; $VoteFailure$_store
builder $VoteFailure$_store(builder build_0, ((slice, cell, int, int, int, (cell, int))) v) inline;

;; $VoteFailure$_store_cell
cell $VoteFailure$_store_cell(((slice, cell, int, int, int, (cell, int))) v) inline;

;; $VoteDeploy$_load
(slice, ((int))) $VoteDeploy$_load(slice sc_0) inline;

;; $VoteContract$_store
builder $VoteContract$_store(builder build_0, (cell, (slice, cell, int, int, int, (cell, int)), int, int, int) v) inline;

;; $VoteContract$_load
(slice, ((cell, (slice, cell, int, int, int, (cell, int)), int, int, int))) $VoteContract$_load(slice sc_0) inline;

;; $SafeOperations$_to_tuple
tuple $SafeOperations$_to_tuple(((cell, int)) v) inline;

;; $VoteArgs$_to_external
(slice, cell, int, int, int, tuple) $VoteArgs$_to_external(((slice, cell, int, int, int, (cell, int))) v) inline;

;; $VoteContract$init$_load
(slice, (((slice, cell, int, int, int, (cell, int))))) $VoteContract$init$_load(slice sc_0) inline;

;; $VoteContract$_contract_init
(cell, (slice, cell, int, int, int, (cell, int)), int, int, int) $VoteContract$_contract_init((slice, cell, int, int, int, (cell, int)) $args) impure inline_ref;

;; $VoteContract$_contract_load
(cell, (slice, cell, int, int, int, (cell, int)), int, int, int) $VoteContract$_contract_load() impure inline_ref;

;; $VoteContract$_contract_store
() $VoteContract$_contract_store((cell, (slice, cell, int, int, int, (cell, int)), int, int, int) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $global_emit
() $global_emit(cell $body) impure inline;

;; $SendParameters$_constructor_value_to_mode_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_value_to_mode_bounce_body(int value, slice to, int mode, int bounce, cell body) inline;

;; $EventVote$_constructor_yes_address
((int, slice)) $EventVote$_constructor_yes_address(int yes, slice address) inline;

;; $EventVoteCompleted$_constructor_success
((int)) $EventVoteCompleted$_constructor_success(int success) inline;

;; $VoteSuccess$_constructor_args
(((slice, cell, int, int, int, (cell, int)))) $VoteSuccess$_constructor_args((slice, cell, int, int, int, (cell, int)) args) inline;

;; $VoteFailure$_constructor_args
(((slice, cell, int, int, int, (cell, int)))) $VoteFailure$_constructor_args((slice, cell, int, int, int, (cell, int)) args) inline;

;; $VoteContract$_fun_doVote
((cell, (slice, cell, int, int, int, (cell, int)), int, int, int), ()) $VoteContract$_fun_doVote((cell, (slice, cell, int, int, int, (cell, int)), int, int, int) $self, slice $address, int $yes) impure inline_ref;

;; $VoteContract$_fun_args
((cell, (slice, cell, int, int, int, (cell, int)), int, int, int), (slice, cell, int, int, int, (cell, int))) $VoteContract$_fun_args((cell, (slice, cell, int, int, int, (cell, int)), int, int, int) $self) impure inline_ref;

;; $VoteContract$_fun_completed
((cell, (slice, cell, int, int, int, (cell, int)), int, int, int), int) $VoteContract$_fun_completed((cell, (slice, cell, int, int, int, (cell, int)), int, int, int) $self) impure inline_ref;

;; $VoteContract$_fun_votedYes
((cell, (slice, cell, int, int, int, (cell, int)), int, int, int), int) $VoteContract$_fun_votedYes((cell, (slice, cell, int, int, int, (cell, int)), int, int, int) $self) impure inline_ref;

;; $VoteContract$_fun_votedNo
((cell, (slice, cell, int, int, int, (cell, int)), int, int, int), int) $VoteContract$_fun_votedNo((cell, (slice, cell, int, int, int, (cell, int)), int, int, int) $self) impure inline_ref;

;; $VoteContract$_fun_remaining
((cell, (slice, cell, int, int, int, (cell, int)), int, int, int), cell) $VoteContract$_fun_remaining((cell, (slice, cell, int, int, int, (cell, int)), int, int, int) $self) impure inline_ref;
