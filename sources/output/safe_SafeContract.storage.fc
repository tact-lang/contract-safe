;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_value_to_mode_bounce_body(int value, slice to, int mode, int bounce, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice to, int value, int mode) inline {
    return (true, to, value, mode, null(), null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_value_to_mode_bounce_code_data_body(int value, slice to, int mode, int bounce, cell code, cell data, cell body) inline {
    return (bounce, to, value, mode, body, code, data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: SafeParameters
;; TLB: _ timeout:uint32 requestPrice:coins timelock:uint32 = SafeParameters
;;

builder $SafeParameters$_store(builder build_0, (int, int, int) v) inline {
    var (v'timeout, v'requestPrice, v'timelock) = v;
    build_0 = build_0.store_uint(v'timeout, 32);
    build_0 = build_0.store_coins(v'requestPrice);
    build_0 = build_0.store_uint(v'timelock, 32);
    return build_0;
}

(slice, ((int, int, int))) $SafeParameters$_load(slice sc_0) inline {
    var v'timeout = sc_0~load_uint(32);
    var v'requestPrice = sc_0~load_coins();
    var v'timelock = sc_0~load_uint(32);
    return (sc_0, (v'timeout, v'requestPrice, v'timelock));
}

(int, int, int) $SafeParameters$_to_external(((int, int, int)) v) inline {
    var (v'timeout, v'requestPrice, v'timelock) = v; 
    return (v'timeout, v'requestPrice, v'timelock);
}

((int, int, int)) $SafeParameters$_constructor_timeout_requestPrice_timelock(int timeout, int requestPrice, int timelock) inline {
    return (timeout, requestPrice, timelock);
}

;;
;; Type: SafeOperations
;; TLB: _ ops:dict<uint8, ^SafeOperation{transfer:Maybe SafeOperationTransfer{to:address,value:coins,mode:uint8,bounce:bool,body:Maybe ^cell},parameters:Maybe SafeOperationUpdateParameters{parameters:SafeParameters{timeout:uint32,requestPrice:coins,timelock:uint32}},add:Maybe SafeOperationAdd{owner:address},remove:Maybe SafeOperationRemove{owner:address},replace:Maybe SafeOperationReplace{old:address,new:address}}> count:uint8 = SafeOperations
;;

builder $SafeOperations$_store(builder build_0, (cell, int) v) inline {
    var (v'ops, v'count) = v;
    build_0 = build_0.store_dict(v'ops);
    build_0 = build_0.store_uint(v'count, 8);
    return build_0;
}

(slice, ((cell, int))) $SafeOperations$_load(slice sc_0) inline {
    var v'ops = sc_0~load_dict();
    var v'count = sc_0~load_uint(8);
    return (sc_0, (v'ops, v'count));
}

;;
;; Type: SafeOperationTransfer
;; TLB: _ to:address value:coins mode:uint8 bounce:bool body:Maybe ^cell = SafeOperationTransfer
;;

(slice, ((slice, int, int, int, cell))) $SafeOperationTransfer$_load(slice sc_0) inline {
    var v'to = sc_0~__tact_load_address();
    var v'value = sc_0~load_coins();
    var v'mode = sc_0~load_uint(8);
    var v'bounce = sc_0~load_int(1);
    var v'body = sc_0~load_int(1) ? sc_0~load_ref() : null();
    return (sc_0, (v'to, v'value, v'mode, v'bounce, v'body));
}

tuple $SafeOperationTransfer$_as_optional((slice, int, int, int, cell) v) inline {
    var (v'to, v'value, v'mode, v'bounce, v'body) = v;
    return __tact_tuple_create_5(v'to, v'value, v'mode, v'bounce, v'body);
}

((slice, int, int, int, cell)) $SafeOperationTransfer$_tensor_cast((slice, int, int, int, cell) v) asm "NOP";

((slice, int, int, int, cell)) $SafeOperationTransfer$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (slice vvv'to, int vvv'value, int vvv'mode, int vvv'bounce, cell vvv'body) = __tact_tuple_destroy_5(v);
    return (vvv'to, vvv'value, vvv'mode, vvv'bounce, vvv'body);
}

;;
;; Type: SafeOperationUpdateParameters
;; TLB: _ parameters:SafeParameters{timeout:uint32,requestPrice:coins,timelock:uint32} = SafeOperationUpdateParameters
;;

(slice, (((int, int, int)))) $SafeOperationUpdateParameters$_load(slice sc_0) inline {
    var v'parameters = sc_0~$SafeParameters$_load();
    return (sc_0, (v'parameters));
}

tuple $SafeOperationUpdateParameters$_as_optional(((int, int, int)) v) inline {
    var ((v'parameters'timeout, v'parameters'requestPrice, v'parameters'timelock)) = v;
    return __tact_tuple_create_3(v'parameters'timeout, v'parameters'requestPrice, v'parameters'timelock);
}

_ $SafeOperationUpdateParameters$_get_parameters(((int, int, int)) v) inline {
    var (v'parameters) = v;
    return v'parameters;
}

(((int, int, int))) $SafeOperationUpdateParameters$_tensor_cast(((int, int, int)) v) asm "NOP";

(((int, int, int))) $SafeOperationUpdateParameters$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'parameters'timeout, int vvv'parameters'requestPrice, int vvv'parameters'timelock) = __tact_tuple_destroy_3(v);
    return ((vvv'parameters'timeout, vvv'parameters'requestPrice, vvv'parameters'timelock));
}

;;
;; Type: SafeOperationAdd
;; TLB: _ owner:address = SafeOperationAdd
;;

(slice, ((slice))) $SafeOperationAdd$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    return (sc_0, (v'owner));
}

tuple $SafeOperationAdd$_as_optional((slice) v) inline {
    var (v'owner) = v;
    return __tact_tuple_create_1(v'owner);
}

;;
;; Type: SafeOperationRemove
;; TLB: _ owner:address = SafeOperationRemove
;;

(slice, ((slice))) $SafeOperationRemove$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    return (sc_0, (v'owner));
}

tuple $SafeOperationRemove$_as_optional((slice) v) inline {
    var (v'owner) = v;
    return __tact_tuple_create_1(v'owner);
}

;;
;; Type: SafeOperationReplace
;; TLB: _ old:address new:address = SafeOperationReplace
;;

(slice, ((slice, slice))) $SafeOperationReplace$_load(slice sc_0) inline {
    var v'old = sc_0~__tact_load_address();
    var v'new = sc_0~__tact_load_address();
    return (sc_0, (v'old, v'new));
}

tuple $SafeOperationReplace$_as_optional((slice, slice) v) inline {
    var (v'old, v'new) = v;
    return __tact_tuple_create_2(v'old, v'new);
}

;;
;; Type: SafeOperation
;; TLB: _ transfer:Maybe SafeOperationTransfer{to:address,value:coins,mode:uint8,bounce:bool,body:Maybe ^cell} parameters:Maybe SafeOperationUpdateParameters{parameters:SafeParameters{timeout:uint32,requestPrice:coins,timelock:uint32}} add:Maybe SafeOperationAdd{owner:address} remove:Maybe SafeOperationRemove{owner:address} replace:Maybe SafeOperationReplace{old:address,new:address} = SafeOperation
;;

(slice, ((tuple, tuple, tuple, tuple, tuple))) $SafeOperation$_load(slice sc_0) inline {
    var v'transfer = sc_0~load_int(1) ? $SafeOperationTransfer$_as_optional(sc_0~$SafeOperationTransfer$_load()) : null();
    var v'parameters = sc_0~load_int(1) ? $SafeOperationUpdateParameters$_as_optional(sc_0~$SafeOperationUpdateParameters$_load()) : null();
    var v'add = sc_0~load_int(1) ? $SafeOperationAdd$_as_optional(sc_0~$SafeOperationAdd$_load()) : null();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'remove = sc_1~load_int(1) ? $SafeOperationRemove$_as_optional(sc_1~$SafeOperationRemove$_load()) : null();
    var v'replace = sc_1~load_int(1) ? $SafeOperationReplace$_as_optional(sc_1~$SafeOperationReplace$_load()) : null();
    return (sc_0, (v'transfer, v'parameters, v'add, v'remove, v'replace));
}

tuple $SafeOperation$_as_optional((tuple, tuple, tuple, tuple, tuple) v) inline {
    var (v'transfer, v'parameters, v'add, v'remove, v'replace) = v;
    return __tact_tuple_create_5(v'transfer, v'parameters, v'add, v'remove, v'replace);
}

tuple $SafeOperation$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $SafeOperation$_as_optional(sc~$SafeOperation$_load());
}

((tuple, tuple, tuple, tuple, tuple)) $SafeOperation$_tensor_cast((tuple, tuple, tuple, tuple, tuple) v) asm "NOP";

((tuple, tuple, tuple, tuple, tuple)) $SafeOperation$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (tuple vvv'transfer, tuple vvv'parameters, tuple vvv'add, tuple vvv'remove, tuple vvv'replace) = __tact_tuple_destroy_5(v);
    return (vvv'transfer, vvv'parameters, vvv'add, vvv'remove, vvv'replace);
}

;;
;; Type: SafeDeployment
;; Header: 0x6eb08253
;; TLB: safe_deployment#6eb08253 remaining:address = SafeDeployment
;;

(slice, ((slice))) $SafeDeployment$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1857061459);
    var v'remaining = sc_0~__tact_load_address();
    return (sc_0, (v'remaining));
}

;;
;; Type: SafeRequestOperation
;; Header: 0xa46a3a3d
;; TLB: safe_request_operation#a46a3a3d ops:SafeOperations{ops:dict<uint8, ^SafeOperation{transfer:Maybe SafeOperationTransfer{to:address,value:coins,mode:uint8,bounce:bool,body:Maybe ^cell},parameters:Maybe SafeOperationUpdateParameters{parameters:SafeParameters{timeout:uint32,requestPrice:coins,timelock:uint32}},add:Maybe SafeOperationAdd{owner:address},remove:Maybe SafeOperationRemove{owner:address},replace:Maybe SafeOperationReplace{old:address,new:address}}>,count:uint8} = SafeRequestOperation
;;

(slice, (((cell, int)))) $SafeRequestOperation$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2758425149);
    var v'ops = sc_0~$SafeOperations$_load();
    return (sc_0, (v'ops));
}

;;
;; Type: VoteArgs
;; TLB: _ safe:address owners:dict<address, bool> ownersCount:uint32 treshold:uint32 timeout:uint64 ops:SafeOperations{ops:dict<uint8, ^SafeOperation{transfer:Maybe SafeOperationTransfer{to:address,value:coins,mode:uint8,bounce:bool,body:Maybe ^cell},parameters:Maybe SafeOperationUpdateParameters{parameters:SafeParameters{timeout:uint32,requestPrice:coins,timelock:uint32}},add:Maybe SafeOperationAdd{owner:address},remove:Maybe SafeOperationRemove{owner:address},replace:Maybe SafeOperationReplace{old:address,new:address}}>,count:uint8} = VoteArgs
;;

builder $VoteArgs$_store(builder build_0, (slice, cell, int, int, int, (cell, int)) v) inline_ref {
    var (v'safe, v'owners, v'ownersCount, v'treshold, v'timeout, (v'ops'ops, v'ops'count)) = v;
    build_0 = __tact_store_address(build_0, v'safe);
    build_0 = build_0.store_dict(v'owners);
    build_0 = build_0.store_uint(v'ownersCount, 32);
    build_0 = build_0.store_uint(v'treshold, 32);
    build_0 = build_0.store_uint(v'timeout, 64);
    build_0 = $SafeOperations$_store(build_0, (v'ops'ops, v'ops'count));
    return build_0;
}

(slice, ((slice, cell, int, int, int, (cell, int)))) $VoteArgs$_load(slice sc_0) inline_ref {
    var v'safe = sc_0~__tact_load_address();
    var v'owners = sc_0~load_dict();
    var v'ownersCount = sc_0~load_uint(32);
    var v'treshold = sc_0~load_uint(32);
    var v'timeout = sc_0~load_uint(64);
    var v'ops = sc_0~$SafeOperations$_load();
    return (sc_0, (v'safe, v'owners, v'ownersCount, v'treshold, v'timeout, v'ops));
}

((slice, cell, int, int, int, (cell, int))) $VoteArgs$_constructor_safe_owners_ownersCount_treshold_timeout_ops(slice safe, cell owners, int ownersCount, int treshold, int timeout, (cell, int) ops) inline {
    return (safe, owners, ownersCount, treshold, timeout, ops);
}

;;
;; Type: VoteSuccess
;; Header: 0x74a2fc69
;; TLB: vote_success#74a2fc69 args:VoteArgs{safe:address,owners:dict<address, bool>,ownersCount:uint32,treshold:uint32,timeout:uint64,ops:SafeOperations{ops:dict<uint8, ^SafeOperation{transfer:Maybe SafeOperationTransfer{to:address,value:coins,mode:uint8,bounce:bool,body:Maybe ^cell},parameters:Maybe SafeOperationUpdateParameters{parameters:SafeParameters{timeout:uint32,requestPrice:coins,timelock:uint32}},add:Maybe SafeOperationAdd{owner:address},remove:Maybe SafeOperationRemove{owner:address},replace:Maybe SafeOperationReplace{old:address,new:address}}>,count:uint8}} = VoteSuccess
;;

(slice, (((slice, cell, int, int, int, (cell, int))))) $VoteSuccess$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1956838505);
    var v'args = sc_0~$VoteArgs$_load();
    return (sc_0, (v'args));
}

;;
;; Type: VoteFailure
;; Header: 0x407aa202
;; TLB: vote_failure#407aa202 args:VoteArgs{safe:address,owners:dict<address, bool>,ownersCount:uint32,treshold:uint32,timeout:uint64,ops:SafeOperations{ops:dict<uint8, ^SafeOperation{transfer:Maybe SafeOperationTransfer{to:address,value:coins,mode:uint8,bounce:bool,body:Maybe ^cell},parameters:Maybe SafeOperationUpdateParameters{parameters:SafeParameters{timeout:uint32,requestPrice:coins,timelock:uint32}},add:Maybe SafeOperationAdd{owner:address},remove:Maybe SafeOperationRemove{owner:address},replace:Maybe SafeOperationReplace{old:address,new:address}}>,count:uint8}} = VoteFailure
;;

(slice, (((slice, cell, int, int, int, (cell, int))))) $VoteFailure$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1081778690);
    var v'args = sc_0~$VoteArgs$_load();
    return (sc_0, (v'args));
}

;;
;; Type: VoteDeploy
;; Header: 0x56137615
;; TLB: vote_deploy#56137615 queryId:uint64 = VoteDeploy
;;

builder $VoteDeploy$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 1444115989, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $VoteDeploy$_store_cell((int) v) inline {
    return $VoteDeploy$_store(begin_cell(), v).end_cell();
}

((int)) $VoteDeploy$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: SafeContract
;;

builder $SafeContract$_store(builder build_0, (int, cell, int, int, (int, int, int)) v) inline {
    var (v'seqno, v'owners, v'ownersCount, v'treshold, (v'parameters'timeout, v'parameters'requestPrice, v'parameters'timelock)) = v;
    build_0 = build_0.store_uint(v'seqno, 64);
    build_0 = build_0.store_dict(v'owners);
    build_0 = build_0.store_int(v'ownersCount, 257);
    build_0 = build_0.store_int(v'treshold, 257);
    build_0 = $SafeParameters$_store(build_0, (v'parameters'timeout, v'parameters'requestPrice, v'parameters'timelock));
    return build_0;
}

(slice, ((int, cell, int, int, (int, int, int)))) $SafeContract$_load(slice sc_0) inline {
    var v'seqno = sc_0~load_uint(64);
    var v'owners = sc_0~load_dict();
    var v'ownersCount = sc_0~load_int(257);
    var v'treshold = sc_0~load_int(257);
    var v'parameters = sc_0~$SafeParameters$_load();
    return (sc_0, (v'seqno, v'owners, v'ownersCount, v'treshold, v'parameters));
}

(slice, ((slice, int))) $SafeContract$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'id = sc_0~load_int(257);
    return (sc_0, (v'owner, v'id));
}

(int, cell, int, int, (int, int, int)) $SafeContract$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$SafeContract$_load();
    } else {
        (slice owner, int id) = $sc~$SafeContract$init$_load();
        $sc.end_parse();
        return $SafeContract$_contract_init(owner, id);
    }
}

() $SafeContract$_contract_store((int, cell, int, int, (int, int, int)) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $SafeContract$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Type: VoteContract
;;

builder $VoteContract$init$_store(builder build_0, ((slice, cell, int, int, int, (cell, int))) v) inline {
    var ((v'args'safe, v'args'owners, v'args'ownersCount, v'args'treshold, v'args'timeout, (v'args'ops'ops, v'args'ops'count))) = v;
    build_0 = $VoteArgs$_store(build_0, (v'args'safe, v'args'owners, v'args'ownersCount, v'args'treshold, v'args'timeout, (v'args'ops'ops, v'args'ops'count)));
    return build_0;
}

(cell, cell) $VoteContract$_init_child(cell sys', (slice, cell, int, int, int, (cell, int)) $args) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: VoteContract
    cell mine = __tact_dict_get_code(source, 22190);
    contracts = __tact_dict_set_code(contracts, 22190, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $VoteContract$init$_store(b, ($args));
    return (mine, b.end_cell());
}