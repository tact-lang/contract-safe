;;
;; Header files for Signer
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_address_eq
int __tact_address_eq(slice a, slice b) inline;

;; __tact_string_builder_start
tuple __tact_string_builder_start(builder b) inline;

;; __tact_string_builder_start_comment
tuple __tact_string_builder_start_comment() inline;

;; __tact_string_builder_end
cell __tact_string_builder_end(tuple builders) inline;

;; __tact_string_builder_append
((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref;

;; $SafeOperations$_store
builder $SafeOperations$_store(builder build_0, (cell, int) v) inline;

;; $SafeOperations$_load
(slice, ((cell, int))) $SafeOperations$_load(slice sc_0) inline;

;; $SignerArgs$_store
builder $SignerArgs$_store(builder build_0, (slice, cell, int, int, int, (cell, int)) v) inline_ref;

;; $SignerArgs$_load
(slice, ((slice, cell, int, int, int, (cell, int)))) $SignerArgs$_load(slice sc_0) inline_ref;

;; $OperationsSigned$_store
builder $OperationsSigned$_store(builder build_0, ((slice, cell, int, int, int, (cell, int))) v) inline;

;; $OperationsSigned$_store_cell
cell $OperationsSigned$_store_cell(((slice, cell, int, int, int, (cell, int))) v) inline;

;; $SignerDeploy$_load
(slice, ((int))) $SignerDeploy$_load(slice sc_0) inline;

;; $Signer$_store
builder $Signer$_store(builder build_0, (cell, (slice, cell, int, int, int, (cell, int)), int, int) v) inline;

;; $Signer$_load
(slice, ((cell, (slice, cell, int, int, int, (cell, int)), int, int))) $Signer$_load(slice sc_0) inline;

;; $SafeOperations$_to_tuple
tuple $SafeOperations$_to_tuple(((cell, int)) v) inline;

;; $SignerArgs$_to_external
(slice, cell, int, int, int, tuple) $SignerArgs$_to_external(((slice, cell, int, int, int, (cell, int))) v) inline;

;; $Signer$init$_load
(slice, (((slice, cell, int, int, int, (cell, int))))) $Signer$init$_load(slice sc_0) inline;

;; $Signer$_contract_init
(cell, (slice, cell, int, int, int, (cell, int)), int, int) $Signer$_contract_init((slice, cell, int, int, int, (cell, int)) $args) impure inline_ref;

;; $Signer$_contract_load
(cell, (slice, cell, int, int, int, (cell, int)), int, int) $Signer$_contract_load() impure inline;

;; $Signer$_contract_store
() $Signer$_contract_store((cell, (slice, cell, int, int, int, (cell, int)), int, int) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $global_emit
() $global_emit(cell $body) impure inline_ref;

;; $String$_fun_asComment
cell $String$_fun_asComment(slice $self) impure inline_ref;

;; $SendParameters$_constructor_value_to_mode_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_value_to_mode_bounce_body(int value, slice to, int mode, int bounce, cell body) inline;

;; $Signer$_fun_args
((cell, (slice, cell, int, int, int, (cell, int)), int, int), (slice, cell, int, int, int, (cell, int))) $Signer$_fun_args((cell, (slice, cell, int, int, int, (cell, int)), int, int) $self) impure inline_ref;

;; $Signer$_fun_completed
((cell, (slice, cell, int, int, int, (cell, int)), int, int), int) $Signer$_fun_completed((cell, (slice, cell, int, int, int, (cell, int)), int, int) $self) impure inline_ref;

;; $Signer$_fun_weight
((cell, (slice, cell, int, int, int, (cell, int)), int, int), int) $Signer$_fun_weight((cell, (slice, cell, int, int, int, (cell, int)), int, int) $self) impure inline_ref;

;; $Signer$_fun_remaining
((cell, (slice, cell, int, int, int, (cell, int)), int, int), cell) $Signer$_fun_remaining((cell, (slice, cell, int, int, int, (cell, int)), int, int) $self) impure inline_ref;

;; $OperationsSigned$_constructor_args
(((slice, cell, int, int, int, (cell, int)))) $OperationsSigned$_constructor_args((slice, cell, int, int, int, (cell, int)) args) inline;
